{"version":3,"sources":["components/About.jsx","components/DataViewer.jsx","components/BlockData.jsx","components/NavBar.jsx","components/TxList.jsx","components/TxData.jsx","api.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","margin","About","onViewBlock","classes","Grid","container","direction","alignItems","Card","className","elevation","CardContent","Typography","variant","gutterBottom","color","Button","onClick","defaultTypes","theme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","DataViewer","data","invertTheme","hideRoot","display","fontFamily","fontSize","justifyContent","minHeight","maxHeight","overflow","textAlign","spinner","marginTop","BlockData","isLoading","onViewTxList","onLatest","onPrev","onNext","useEffect","Container","disableGutters","CircularProgress","size","ButtonGroup","disabled","ArrowBackIos","ArrowForwardIos","flexGrow","title","NavBar","AppBar","position","Toolbar","defaultProps","tx","backgroundColor","TxList","onViewTxData","List","map","txHash","ListItem","key","ListItemText","disableTypography","TxData","getLatestBlockHash","a","fetch","response","json","hash","Error","fetchBlock","blockHash","console","log","App","useState","setIsLoading","blocks","setBlocks","currentBlockHash","setCurrentBlockHash","currentTx","setCurrentTx","view","setView","getBlock","previousBlockHash","block","api","next","prev_block","undefined","maxWidth","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2a865e1.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Button, Card, CardContent, Grid, Typography } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles({\n  root: {\n    margin: \"20px 0\"\n  }\n})\n\nconst About = ({ onViewBlock }) => {\n  const classes = useStyles()\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <Card className={classes.root} elevation={10}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Blockchain Browser\n          </Typography>\n          <Typography color=\"textSecondary\" gutterBottom>\n            Browse blockchain blocks and transactions\n          </Typography>\n        </CardContent>\n      </Card>\n      <Button variant=\"text\" color=\"primary\" onClick={onViewBlock}>\n        Start\n      </Button>\n    </Grid>\n  )\n}\n\nAbout.propTypes = {\n  onViewBlock: PropTypes.func\n}\n\nAbout.defaultTypes = {\n  onViewBlock: () => {}\n}\n\nexport default About\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport JSONTree from \"react-json-tree\"\n\nconst theme = {\n  scheme: \"monokai\",\n  author: \"wimer hazenberg (http://www.monokai.nl)\",\n  base00: \"#272822\",\n  base01: \"#383830\",\n  base02: \"#49483e\",\n  base03: \"#75715e\",\n  base04: \"#a59f85\",\n  base05: \"#f8f8f2\",\n  base06: \"#f5f4f1\",\n  base07: \"#f9f8f5\",\n  base08: \"#f92672\",\n  base09: \"#fd971f\",\n  base0A: \"#f4bf75\",\n  base0B: \"#a6e22e\",\n  base0C: \"#a1efe4\",\n  base0D: \"#66d9ef\",\n  base0E: \"#ae81ff\",\n  base0F: \"#cc6633\"\n}\n\nconst DataViewer = ({ data }) => {\n  return (\n    <JSONTree data={data} theme={theme} invertTheme={true} hideRoot={true} />\n  )\n}\n\nDataViewer.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default DataViewer\n","import React, { useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardContent,\n  CircularProgress,\n  Container\n} from \"@material-ui/core\"\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport DataViewer from \"./DataViewer\"\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    fontFamily: \"'Roboto Mono', monospace\",\n    fontSize: \"0.85rem\",\n    justifyContent: \"center\",\n    minHeight: \"60vh\",\n    margin: \"20px 0\",\n    maxHeight: \"60vh\",\n    overflow: \"auto\",\n    textAlign: \"left\"\n  },\n  spinner: {\n    marginTop: 100\n  }\n})\n\nconst BlockData = ({\n  isLoading,\n  data,\n  onViewTxList,\n  onLatest,\n  onPrev,\n  onNext\n}) => {\n  const classes = useStyles()\n\n  useEffect(() => {\n    data === null && onLatest()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <Container disableGutters>\n      <Card className={classes.root} elevation={10}>\n        {isLoading && (\n          <CircularProgress size={100} className={classes.spinner} />\n        )}\n        {!isLoading && (\n          <CardContent>{data && <DataViewer data={data} />}</CardContent>\n        )}\n      </Card>\n      <ButtonGroup variant=\"text\" color=\"primary\" disabled={isLoading}>\n        <Button>\n          <ArrowBackIos onClick={onPrev} />\n        </Button>\n        <Button onClick={onViewTxList}>Tx List</Button>\n        <Button onClick={onLatest}>Latest</Button>\n        <Button>\n          <ArrowForwardIos onClick={onNext} />\n        </Button>\n      </ButtonGroup>\n    </Container>\n  )\n}\n\nBlockData.propTypes = {\n  isLoading: PropTypes.bool,\n  data: PropTypes.object.isRequired,\n  onViewTxList: PropTypes.func,\n  onLatest: PropTypes.func,\n  onPrev: PropTypes.func,\n  onNext: PropTypes.func\n}\n\nBlockData.defaultTypes = {\n  isLoading: false,\n  onViewTxList: () => {},\n  onLatest: () => {},\n  onPrev: () => {},\n  onNext: () => {}\n}\n\nexport default BlockData\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { AppBar, Typography } from \"@material-ui/core\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nconst NavBar = ({ title }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\">\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nNavBar.propTypes = {\n  title: PropTypes.string.isRequired\n}\n\nNavBar.defaultProps = {\n  title: \"Blockchain Browser\"\n}\n\nexport default NavBar\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {\n  Button,\n  Card,\n  CardContent,\n  Container,\n  List,\n  ListItem,\n  ListItemText\n} from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles({\n  root: {\n    fontFamily: \"'Roboto Mono', monospace\",\n    fontSize: \"0.85rem\",\n    margin: \"20px 0\",\n    maxHeight: \"60vh\",\n    \"overflow-y\": \"scroll\",\n    \"overflow-x\": \"clip\",\n    textAlign: \"left\"\n  },\n  tx: {\n    \"&:hover\": {\n      backgroundColor: \"lightgray\"\n    }\n  }\n})\n\nconst TxList = ({ data, onViewBlock, onViewTxData }) => {\n  const classes = useStyles()\n\n  return (\n    <Container disableGutters>\n      <Card className={classes.root} elevation={10}>\n        <CardContent>\n          <List>\n            {data.map(txHash => (\n              <ListItem\n                key={txHash}\n                onClick={() => onViewTxData(txHash)}\n                disableGutters={true}\n              >\n                <ListItemText className={classes.tx} disableTypography>\n                  {txHash}\n                </ListItemText>\n              </ListItem>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n      <Button variant=\"text\" color=\"primary\" onClick={onViewBlock}>\n        Back to Block\n      </Button>\n    </Container>\n  )\n}\n\nTxList.propTypes = {\n  data: PropTypes.object.isRequired,\n  onViewBlock: PropTypes.func,\n  onViewTxData: PropTypes.func\n}\n\nTxList.defaultTypes = {\n  onViewBlock: () => {},\n  onViewTxData: () => {}\n}\n\nexport default TxList\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardContent,\n  Container\n} from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport DataViewer from \"./DataViewer\"\n\nconst useStyles = makeStyles({\n  root: {\n    fontFamily: \"'Roboto Mono', monospace\",\n    fontSize: \"0.85rem\",\n    margin: \"20px 0\",\n    maxHeight: \"60vh\",\n    overflow: \"auto\",\n    textAlign: \"left\"\n  }\n})\n\nconst TxData = ({ data, onViewTxList }) => {\n  const classes = useStyles()\n\n  return (\n    <Container disableGutters>\n      <Card className={classes.root} elevation={10}>\n        <CardContent>{data && <DataViewer data={data} />}</CardContent>\n      </Card>\n      <ButtonGroup variant=\"text\" color=\"primary\">\n        <Button onClick={onViewTxList}>Back to Tx List</Button>\n      </ButtonGroup>\n    </Container>\n  )\n}\n\nTxData.propTypes = {\n  data: PropTypes.shape({\n    next: PropTypes.string.isRequired,\n    block: PropTypes.object.isRequired\n  }).isRequired,\n  onViewTxList: PropTypes.func\n}\n\nTxData.defaultTypes = {\n  onViewTxList: () => {}\n}\n\nexport default TxData\n","export async function getLatestBlockHash() {\n  try {\n    const response = await fetch(\n      \"https://blockchain.info/latestblock?cors=true\"\n    )\n    const data = await response.json()\n    return data.hash\n  } catch (e) {\n    throw new Error(\"Error fetching latest block\", e)\n  }\n}\n\nexport async function fetchBlock(blockHash) {\n  console.log(\"fetchBlock\", blockHash)\n  const hash = blockHash || (await getLatestBlockHash())\n  try {\n    const response = await fetch(\n      `https://blockchain.info/rawblock/${hash}?cors=true`\n    )\n    return await response.json()\n  } catch (e) {\n    throw new Error(\"failed to fetch block\", e)\n  }\n}\n","import React, { useState } from \"react\"\nimport { Container } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nimport About from \"./About\"\nimport BlockData from \"./BlockData\"\nimport NavBar from \"./NavBar\"\nimport TxList from \"./TxList\"\nimport TxData from \"./TxData\"\nimport * as api from \"../api.js\"\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: \"center\"\n  }\n})\n\nconst App = () => {\n  const ABOUT_VIEW = \"About\"\n  const BLOCK_VIEW = \"Block\"\n  const TX_LIST_VIEW = \"Transaction List\"\n  const TX_DATA_VIEW = \"Transaction Data\"\n\n  const [isLoading, setIsLoading] = useState(true)\n  const [blocks, setBlocks] = useState({})\n  const [currentBlockHash, setCurrentBlockHash] = useState(null)\n  const [currentTx, setCurrentTx] = useState(null)\n  const [view, setView] = useState(ABOUT_VIEW)\n\n  async function getBlock(blockHash, previousBlockHash) {\n    if (blocks[blockHash]) {\n      const block = { ...blocks[blockHash].block }\n      setCurrentBlockHash(block.hash)\n    } else {\n      setIsLoading(true)\n      const block = await api.fetchBlock(blockHash || null)\n      setIsLoading(false)\n      setBlocks({\n        ...blocks,\n        [block.hash]: { next: previousBlockHash || null, block }\n      })\n      setCurrentBlockHash(block.hash)\n    }\n  }\n\n  async function onPrevBlockHandler() {\n    const hash = currentBlockHash\n      ? blocks[currentBlockHash].block.prev_block\n      : undefined\n    await getBlock(hash, currentBlockHash)\n  }\n\n  async function onNextBlockHandler() {\n    const hash = currentBlockHash ? blocks[currentBlockHash].next : undefined\n    await getBlock(hash)\n  }\n\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <NavBar title={view} />\n      <Container maxWidth=\"md\">\n        {view === ABOUT_VIEW && (\n          <About\n            isLoading={isLoading}\n            onViewBlock={() => {\n              setView(BLOCK_VIEW)\n            }}\n          />\n        )}\n        {view === BLOCK_VIEW && (\n          <BlockData\n            isLoading={isLoading}\n            data={currentBlockHash ? blocks[currentBlockHash].block : null}\n            onPrev={onPrevBlockHandler}\n            onNext={onNextBlockHandler}\n            onLatest={() => getBlock()}\n            onViewTxList={() => setView(TX_LIST_VIEW)}\n          />\n        )}\n        {view === TX_LIST_VIEW && (\n          <TxList\n            data={blocks[currentBlockHash].block.tx.map(tx => tx.hash)}\n            onViewBlock={() => {\n              setView(BLOCK_VIEW)\n            }}\n            onViewTxData={txHash => {\n              setCurrentTx(txHash)\n              setView(TX_DATA_VIEW)\n            }}\n          />\n        )}\n        {view === TX_DATA_VIEW && (\n          <TxData\n            data={blocks[currentBlockHash].block.tx.find(\n              tx => tx.hash === currentTx\n            )}\n            onViewTxList={() => {\n              setView(TX_LIST_VIEW)\n            }}\n          />\n        )}\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}